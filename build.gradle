buildscript {
    ext {
        dependencyManagementVersion = '1.1.0'
        springBootVersion = '3.4.1'
        jacocoVersion = '0.8.12'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jacoco:org.jacoco.core:${jacocoVersion}")
    }
}

plugins {
    id 'base'
}

clean {
    delete rootProject.buildDir
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'jacoco'

    group = 'org.yechan'
    version = '1.0-SNAPSHOT'
    sourceCompatibility = '21'

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    if (project.name != 'application') {
        bootJar {
            enabled = false
        }
        jar {
            enabled = true
        }
    }

    if (project.name != 'common') {
        dependencies {
            implementation project(":common")
            implementation 'org.springframework:spring-context'
            testImplementation 'io.rest-assured:rest-assured:5.3.2'
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.slf4j:slf4j-api'
        testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
//        testImplementation 'io.github.autoparams:autoparams:11.0.5'
    }

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = "0.8.12"
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
        systemProperty 'spring.profiles.active', 'test'
    }

    def jacocoExcludes = [
        'config/**',
        '**/config/**',
        'org/yechan/Application.class'
    ]

    def jacocoClassExcludes = [
        'org.yechan.entity.Q*',
        'org.yechan.dto.*',
        'org.yechan.exception.*',
        'org.yechan.config.*',
        'config.*'
    ]

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            csv.required = false
            html.destination = layout.buildDirectory.dir("jacocoHtml").get().asFile
        }
        finalizedBy 'jacocoTestCoverageVerification'

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExcludes)
            }))
        }
    }

    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport

        onlyIf {
            !project.gradle.startParameter.taskNames.any { it.contains(":") } &&
                    (test.filter.includePatterns.isEmpty() && test.filter.excludePatterns.isEmpty())
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExcludes)
            }))
        }

        violationRules {
            rule {
                limit {
                    counter = 'INSTRUCTION'
                    value = 'COVEREDRATIO'
                    minimum = 0.85
                }

                excludes = jacocoClassExcludes
            }

            rule {
                enabled = true
                element = 'CLASS'

                // branch coverage ratio
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.90
                }

                // line coverage ratio
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.80
                }

                // line count
                limit {
                    counter = 'LINE'
                    value = 'TOTALCOUNT'
                    maximum = 200
                }

                excludes = jacocoClassExcludes
            }
        }
    }
}
