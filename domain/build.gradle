bootJar {
    enabled = false
}
jar {
    enabled = true
}

dependencies {
    api project(':common')
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'mysql:mysql-connector-java:8.0.33'// 얘도 따지자면 기술 종속적 개념 아닌가?
}

def querydslDir = layout.buildDirectory.get().asFile.absolutePath + "/generated/querydsl"
sourceSets {
    main.java.srcDir querydslDir
}
tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorPath = configurations.annotationProcessor
}

allprojects {
    dependencies {
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
        annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
        annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
        api 'com.h2database:h2'// 과연 도메인 모듈이 특정 기술에 의존을 하는게 맞을까?
    }
}

subprojects {
    bootJar {
        enabled = false
    }
    jar {
        enabled = true
    }

    dependencies {
        implementation project(':domain')
    }

    def subquerydslDir = layout.buildDirectory.get().asFile.absolutePath + "/generated/querydsl"
    sourceSets {
        main.java.srcDir subquerydslDir
    }
    tasks.withType(JavaCompile).configureEach {
        options.annotationProcessorPath = configurations.annotationProcessor
    }
}
